local function a(b)_M.start=true;_M.recon:stop()print("Connected")b:subscribe(_M.topic.."+/comm/#",0,function(b)end)dofile("MQTT_sub.lua")(_M.timer)end;local function c(b,d)collectgarbage()end;local function e(f)if f then print("Trying connect to ".._M.server..":".._M.port)_M.mqtt:connect(_M.server,_M.port,0,a,c)else _M.recon:stop()_M.mqtt:close()_M.start=false end end;local function g()_M.id=_M.id or"DoT-"..string.format("%x",node.chipid()*256):sub(0,6):upper()_M.topic=_M.topic or _M.id.."/"_M.mqtt=mqtt.Client(_M.id,120,_M.login or"",_M.pass or"")function _M:pub(h,i,j)if _M.start then _M.mqtt:publish(j and"/"..h or _M.topic..h,tostring(i),0,0)end end;_M.recon=tmr.create()_M.recon:register(10000,tmr.ALARM_AUTO,function(k)dofile("MQTT.lua")({conn=true})end)_M.recon:interval(5000)_M.mqtt:on("offline",function(l)_M.recon:start()end)_M.mqtt:on("message",dofile("MQTT_mes.lua"))_M.recon:start()end;return function(k)if k.init then g()end;if k.conn~=nil then e(k.conn)end;return true end
